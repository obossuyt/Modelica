#1
char Aclass(3,32)
Adymosim
1.4
Final state generated by Dymosim


#    Experiment parameters
double experiment(7,1)
       5                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
      10                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     500                   # nInterval    Number of communication intervals, if > 0
 1.0000000000000000E-004   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       8                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
 2.0000000000000000E-014   # teps     Bound to check, if 2 equal time instants
 1.0000000000000000E-010   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
 9.9999999999999995E-007   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(84,21)
motor.Ra.R
motor.Ra.T_ref
motor.Ra.alpha
motor.Ra.v
motor.Ra.n.v
motor.Ra.useHeatPort
motor.Ra.T
motor.Ra.LossPower
motor.Ra.R_actual
motor.La.v
motor.La.i
motor.La.der(i)
motor.La.n.v
motor.La.L
motor.G.p.v
motor.G.p.i
motor.emf.useSupport
motor.emf.k
motor.emf.phi
motor.emf.n.v
motor.emf.flange.tau
motor.emf.fixed.phi0
motor.Vs.n.v
motor.Jm.J
motor.Jm.stateSelect
motor.Jm.phi
motor.Jm.w
motor.Jm.der(w)
motor.v1
motor.flange_b1.tau
positionerror.u1
positionerror.y
controller.y
controller.k
controller.Ti
controller.Td
controller.Nd
controller.initType
controller.xi_start
controller.xd_start
controller.y_start
controller.unitTime
controller.P.k
controller.P.y
controller.I.k
controller.I.initType
controller.I.y_start
controller.I.y
controller.I.der(y)
controller.D.k
controller.D.T
controller.D.initType
controller.D.x_start
controller.D.y_start
controller.D.y
controller.D.x
controller.D.der(x)
controller.D.zeroGain
controller.Gain.k
controller.Gain.u
controller.Add.k1
controller.Add.k2
controller.Add.k3
gearbox.useSupport
gearbox.flange_b.tau
gearbox.phi_support
gearbox.ratio
load.flange_b.tau
load.J
load.stateSelect
load.phi
load.der(phi)
load.w
load.der(w)
phiload.flange.tau
limiter.uMax
limiter.uMin
limiter.strict
limiter.limitsAtInit
r
m
step.height
step.offset
step.startTime

double initialValue(84,6)
 -1 5.0000000000000000E-001       0                       0                
  1   280   # motor.Ra.R
 -1 3.0014999999999998E+002       0                 1.0000000000000000E+100
  1   280   # motor.Ra.T_ref
 -1       0                       0                       0                
  1   280   # motor.Ra.alpha
 -2 -1.4805740855877542E-002       0                       0                
  6   256   # motor.Ra.v
 -2 1.3515434468750840E-003       0                       0                
  6   260   # motor.Ra.n.v
 -2       0                       0                       0                
  6   769   # motor.Ra.useHeatPort
 -2 3.0014999999999998E+002       0                 1.0000000000000000E+100
  6   256   # motor.Ra.T
 -2 4.3841992458280290E-004       0                       0                
  6   256   # motor.Ra.LossPower
 -2 5.0000000000000000E-001       0                       0                
  6   256   # motor.Ra.R_actual
 -2 3.2385030947011946E-003       0                       0                
  6   256   # motor.La.v
 -2 -2.9611481711755084E-002       0                       0                
  2   280   # motor.La.i
 -2 6.4770061894023886E-002       0                       0                
  3   256   # motor.La.der(i)
 -2 -1.8869596478261106E-003       0                       0                
  6   260   # motor.La.n.v
 -1 5.0000000000000003E-002       0                       0                
  1   280   # motor.La.L
 -2       0                       0                       0                
  6   260   # motor.G.p.v
 -2       0                       0                       0                
  6   388   # motor.G.p.i
 -2       0                       0                       0                
  6   769   # motor.emf.useSupport
 -1       1                       0                       0                
  1   280   # motor.emf.k
 -2 3.0246982500311859E+000       0                       0                
  6   256   # motor.emf.phi
 -2       0                       0                       0                
  6   260   # motor.emf.n.v
 -2 2.9611481711755084E-002       0                       0                
  6   388   # motor.emf.flange.tau
 -1       0                       0                       0                
  1  1304   # motor.emf.fixed.phi0
 -2       0                       0                       0                
  6   260   # motor.Vs.n.v
 -1 1.0000000000000000E-003       0                 1.0000000000000000E+100
  1   280   # motor.Jm.J
 -2       3                       1                       5                
  6   770   # motor.Jm.stateSelect
 -2 3.0246982500311859E+000       0                       0                
  6   264   # motor.Jm.phi
 -2 -1.8869596478261106E-003       0                       0                
  6   264   # motor.Jm.w
 -2 -2.6626369807752598E-002       0                       0                
  6   256   # motor.Jm.der(w)
 -2 -1.3454197409002458E-002       0                       0                
  6   256   # motor.v1
 -2 2.9584855341947332E-002       0                       0                
  6   388   # motor.flange_b1.tau
 -2       1                       0                       0                
  6   320   # positionerror.u1
 -2 -8.2327500103953621E-003       0                       0                
  6   256   # positionerror.y
 -2 -1.3454197409002458E-002       0                       0                
  6   256   # controller.y
 -1       2                       0                       0                
  1   280   # controller.k
 -1    1000                 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # controller.Ti
 -1 1.0000000000000000E-003       0                 1.0000000000000000E+100
  1   280   # controller.Td
 -1      10                 9.9999999999999997E-061 1.0000000000000000E+100
  1   280   # controller.Nd
 -2       5                       1                       5                
  6   258   # controller.initType
 -1       0                       0                       0                
  1   280   # controller.xi_start
 -1       0                       0                       0                
  1   280   # controller.xd_start
 -1       0                       0                       0                
  1   280   # controller.y_start
 -2       1                       0                       0                
  6   768   # controller.unitTime
 -1       1                       0                       0                
  1   280   # controller.P.k
 -2 -8.2327500103953621E-003       0                       0                
  6   256   # controller.P.y
 -2 1.0000000000000000E-003       0                       0                
  6   256   # controller.I.k
 -2       3                       1                       4                
  6   258   # controller.I.initType
 -2       0                       0                       0                
  6   256   # controller.I.y_start
 -2 1.5050232070858908E-003       0                       0                
  2   272   # controller.I.y
 -2 -8.2327500103953627E-006       0                       0                
  3   256   # controller.I.der(y)
 -2 1.0000000000000000E-003       0                       0                
  6   256   # controller.D.k
 -2 1.0000000000000000E-004 9.9999999999999997E-061 1.0000000000000000E+100
  6   256   # controller.D.T
 -2       1                       1                       4                
  6   258   # controller.D.initType
 -2       0                       0                       0                
  6   256   # controller.D.x_start
 -1       0                       0                       0                
  1   280   # controller.D.y_start
 -2 6.2809880824188369E-007       0                       0                
  6   256   # controller.D.y
 -2 -8.2328128202761863E-003       0                       0                
  2   272   # controller.D.x
 -2 6.2809880824188369E-004       0                       0                
  3   256   # controller.D.der(x)
 -2       0                       0                       0                
  6  1281   # controller.D.zeroGain
 -2       2                       0                       0                
  6   256   # controller.Gain.k
 -2 -6.7270987045012290E-003       0                       0                
  6   256   # controller.Gain.u
 -1       1                       0                       0                
  1   280   # controller.Add.k1
 -1       1                       0                       0                
  1   280   # controller.Add.k2
 -1       1                       0                       0                
  1   280   # controller.Add.k3
 -2       0                       0                       0                
  6   769   # gearbox.useSupport
 -2 8.8754566025842002E-002       0                       0                
  6   388   # gearbox.flange_b.tau
 -2       0                       0                       0                
  6  1280   # gearbox.phi_support
 -1       3                       0                       0                
  1   280   # gearbox.ratio
 -2       0                       0                       0                
  6   388   # load.flange_b.tau
 -2      10                       0                 1.0000000000000000E+100
  6   256   # load.J
 -2       3                       1                       5                
  6   770   # load.stateSelect
 -2 1.0082327500103954E+000       0                       0                
  2   272   # load.phi
 -2 -6.2898654927537019E-004       0                       0                
  3   256   # load.der(phi)
 -2 -6.2898654927537019E-004       0                       0                
  2   272   # load.w
 -2 -8.8754566025841999E-003       0                       0                
  3   256   # load.der(w)
 -2       0                       0                       0                
  6   388   # phiload.flange.tau
 -1     100                       0                       0                
  1   280   # limiter.uMax
 -1    -100                       0                       0                
  1   280   # limiter.uMin
 -2       0                       0                       0                
  6   257   # limiter.strict
 -2       1                       0                       0                
  6   257   # limiter.limitsAtInit
 -1 5.0000000000000000E-001       0                 1.0000000000000000E+100
  1   280   # r
 -1      80                       0                 1.0000000000000000E+100
  1   280   # m
 -1       1                       0                       0                
  1   280   # step.height
 -1       0                       0                       0                
  1   280   # step.offset
 -1       0                       0                       0                
  1   280   # step.startTime


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable.
#           = 0: real.
#           = 1: boolean.
#           = 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(84,130)
Resistance at temperature T_ref [Ohm]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop between the two pins (= p.v - n.v) [V]
Potential at the pin [V]
=true, if HeatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via HeatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Voltage drop between the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
der(Current flowing from pin p to pin n) [A/s]
Potential at the pin [V]
Inductance [H]
Potential at the pin [V]
Current flowing into the pin [A]
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Transformation coefficient [N.m/A]
Angle of shaft flange with respect to support (= flange.phi - support.phi) [rad|deg]
Potential at the pin [V]
Cut torque in the flange [N.m]
Fixed offset angle of housing [rad|deg]
Potential at the pin [V]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Voltage between pin p and n (= p.v - n.v) as input signal [V]
Cut torque in the flange [N.m]
[rad]
[rad]
Connector of Real output signal [V]
Gain [1]
Time Constant of Integrator [s]
Time Constant of Derivative block [s]
The higher Nd, the more ideal the derivative block
Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output) [:#(type=Modelica.Blocks.Types.InitPID)]
Initial or guess value value for integrator output (= integrator state) [s.rad]
Initial or guess value for state of derivative block [rad]
Initial value of output [V]
[s]
Gain value multiplied with input signal [1]
Output signal connector [rad]
Integrator gain [1]
Type of initialization (1: no init, 2: steady state, 3,4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of output (= state) [s.rad]
Connector of Real output signal [s.rad]
der(Connector of Real output signal) [rad]
Gains [1]
Time constants (T>0 required; T=0 is ideal derivative block) [s]
Type of initialization (1: no init, 2: steady state, 3: initial state, 4: initial output) [:#(type=Modelica.Blocks.Types.Init)]
Initial or guess value of state [rad]
Initial value of output (= state) [rad/s]
Connector of Real output signal [rad/s]
State of block [rad]
der(State of block) [rad/s]
[:#(type=Boolean)]
Gain value multiplied with input signal [1]
Input signal connector
Gain of upper input
Gain of middle input
Gain of lower input
= true, if support flange enabled, otherwise implicitly grounded [:#(type=Boolean)]
Cut torque in the flange [N.m]
Absolute angle of support flange [rad|deg]
Transmission ratio (flange_a.phi/flange_b.phi) [1]
Cut torque in the flange [N.m]
Moment of inertia [kg.m2]
Priority to use phi and w as states [:#(type=StateSelect)]
Absolute rotation angle of component [rad|deg]
der(Absolute rotation angle of component) [rad/s]
Absolute angular velocity of component (= der(phi)) [rad/s]
der(Absolute angular velocity of component (= der(phi))) [rad/s2]
Cut torque in the flange [N.m]
Upper limits of input signals [V]
Lower limits of input signals [V]
= true, if strict limits with noEvent(..) [:#(type=Boolean)]
= false, if limits are ignored during initialization (i.e., y=u) [:#(type=Boolean)]
Radius of load [m]
mass of load [kg]
Height of step [rad]
Offset of output signal y [rad]
Output y = offset for time < startTime [s]

